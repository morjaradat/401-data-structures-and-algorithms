/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import HashMapTree.TreeHashMap;
import Graph.Graphv;
import Trip.BusinessTrip;

public class App {

    public static void main(String[] args) {
        System.out.println("test");
//      BinarySearchTree<Integer> tree_1 = new BinarySearchTree<Integer>();
//      BinarySearchTree<Integer> tree_2 = new BinarySearchTree<Integer>();
//
//      TreeHashMap treeHashMap = new TreeHashMap();
//
//      tree_1.add(3);
//      tree_1.add(1);
//      tree_1.add(2);
//      tree_1.add(4);
//      tree_1.add(5);
//      tree_1.add(6);
//
//      tree_2.add(0);
//      tree_2.add(10);
//      tree_2.add(15);
//      tree_2.add(53);
//      tree_2.add(2);
//      tree_2.add(6);

//      System.out.println(treeHashMap.treeIntersection(tree_1,tree_2));;

//      LeftJoin leftJoin = new LeftJoin();
//      HashMap<String,String> map = new HashMap<String, String>();
//      HashMap<String,String> map2 = new HashMap<String, String>();
//
//      map.put("key1","value1");
//      map.put("key2","value2");
//      map.put("key3","value3");
//      map.put("key3","value4");
//      map.put("key4","value5");
//
//      map2.put("key21","value6");
//      map2.put("key354","value7");
//      map2.put("key3","value8");
//      map2.put("key4","value9");
//
//      List<String[]> list = leftJoin.leftJoin(map,map2);
//      for (String[] item : list){
//        System.out.println(Arrays.toString(item));
//      }

//      System.out.println(leftJoin.leftJoin(map,map2));

//      System.out.println(map.keySet());
//      HashTables<String,Integer> hashTables = new HashTables<>();
//
//      hashTables.add("mohammad1",10);
//      hashTables.add("mohammad2",20);
//      hashTables.add("mohammad3",30);
//      hashTables.add("mohammad4",40);
//
//        System.out.println("the size is "+ hashTables.getSize());
//        System.out.println("the mohammad2 is "+ hashTables.get("mohammad1"));
//        System.out.println("the delete is "+ hashTables.remove("mohammad2"));
//        System.out.println("the size is "+ hashTables.getSize());

//        RepeatedWord word = new RepeatedWord();
//
//        String text = "It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didnâ€™t know what I was doing in New York...";
//        String text1 = "";
//
//        System.out.println(word.repeatedWord(text1));

//        System.out.println(word.repeatedWords(text));

//      Graphv<String,Integer> graph = new Graphv<String,Integer>();
//      graph.addNode("mor1");
//      graph.addNode("mor2");
//      graph.addNode("mor3");
//      graph.addNode("mor4");
//      graph.addNode("mor5");
//      graph.addNode("mor6");
//
//      graph.addEdge("mor1","mor2");
//
//      graph.addEdge("mor2","mor3");
//      graph.addEdge("mor2","mor4");
//
//      graph.addEdge("mor3","mor4");
//      graph.addEdge("mor3","mor5");
//      graph.addEdge("mor3","mor6");

//      System.out.println(graph.print());

//        Graphv<String,Integer> test = new Graphv<String,Integer>();
//
//    test.addNode("Pandora");
//    test.addNode("Arendelle");
//    test.addNode("Metroville");
//    test.addNode("Monstropolis");
//    test.addNode("Narnia");
//    test.addNode("Naboo");
//
//    test.addEdge("Pandora", "Arendelle");
//
//    test.addEdge("Arendelle", "Pandora");
//    test.addEdge("Arendelle", "Metroville");
//    test.addEdge("Arendelle", "Monstropolis");
//
//    test.addEdge("Metroville", "Arendelle");
//    test.addEdge("Metroville", "Monstropolis");
//    test.addEdge("Metroville", "Narnia");
//    test.addEdge("Metroville", "Naboo");
//
//    test.addEdge("Monstropolis", "Arendelle");
//    test.addEdge("Monstropolis", "Metroville");
//    test.addEdge("Monstropolis", "Naboo");
//
//    test.addEdge("Naboo", "Monstropolis");
//    test.addEdge("Naboo", "Metroville");
//    test.addEdge("Naboo", "Naboo");
//
//    test.addEdge("Narnia", "Naboo");
//    test.addEdge("Narnia", "Metroville");
//
//        System.out.println(test.breadthFirst("Pandora"));



//
        Graphv<String, Integer> test = new Graphv<>();
        test.addNode("Pandora");
        test.addNode("Arendelle");
        test.addNode("Metroville");
        test.addNode("Monstropolis");
        test.addNode("Narnia");
        test.addNode("Naboo");

        test.addEdge("Pandora", "Arendelle", 150);


        test.addEdge("Arendelle", "Pandora", 150);
        test.addEdge("Arendelle", "Metroville",99);
        test.addEdge("Arendelle", "Monstropolis",42);

        test.addEdge("Metroville", "Pandora",82);
        test.addEdge("Metroville", "Arendelle",99);
        test.addEdge("Metroville", "Monstropolis",105);
        test.addEdge("Metroville", "Narnia",37);
        test.addEdge("Metroville", "Naboo",26);

        test.addEdge("Monstropolis", "Arendelle",42);
        test.addEdge("Monstropolis", "Metroville",105);
        test.addEdge("Monstropolis", "Naboo",37);

        test.addEdge("Naboo", "Monstropolis",37);
        test.addEdge("Naboo", "Metroville",26);
        test.addEdge("Naboo", "Narnia",250);

        test.addEdge("Narnia", "Naboo",250);
        test.addEdge("Narnia", "Metroville",37);

        System.out.println(BusinessTrip.businessTrip(test,new String[]{"Metroville", "Pandora"}));
//        System.out.println(graph.getNode());
//        System.out.println(graph.getNeighbors("mor1"));
//        System.out.println(graph.getSize());

//        Graphv<String> airports = new Graphv<String>();
//        airports.addNode("Amman");
//        airports.addNode("Aqaba");
//        airports.addNode("Assab");
//        airports.addNode("Azraq");
//        airports.addNode("Dafyanah");
//        airports.addNode("Mafraq");
//
//        airports.addEdge("Amman", "Queen Alia International Airport");
//        airports.addEdge("Amman", "Amman Civil Airport");
//        airports.addEdge("Aqaba", "King Hussein International Airport");
//        airports.addEdge("Assab", "H-4 Air Base");
//        airports.addEdge("Azraq", "Muwaffaq Salti Air Base");
//        airports.addEdge("Dafyanah", "Prince Hassan Air Base");
//        airports.addEdge("Mafraq", "King Hussein Air Base");
//
//        System.out.println(airports.getSize());


    }
}
