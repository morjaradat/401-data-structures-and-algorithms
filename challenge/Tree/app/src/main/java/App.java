/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import structure.BinaryTree;
import structure.KAryTree;

import java.util.ArrayList;
import java.util.List;

public class App {

    public static void main(String[] args) throws Exception {
        System.out.println("test");

        BinaryTree<Integer> binaryTree = new BinaryTree<>();
        BinaryTree<Integer> binaryTree2 = new BinaryTree<>();
//        Queue<Node> queue = new Queue<>();

        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        list.add(6);
        list.add(7);
        list.add(8);
//        list.add(9);
//        list.add(30);
        KAryTree<Integer> kAryTree = new KAryTree<>(list, 3);


        System.out.println(kAryTree.noOrder(kAryTree));
        System.out.println();

        KAryTree<String> newTree = kAryTree.treeFizzBuzz(kAryTree);

        System.out.println(newTree.noOrder(newTree));

        // 5 6 7 2 8 9 30 3 4 1
        //Buzz Fizz 7 2 8 Fizz FizzBuzz Fizz 4 1


        // adds nodes to the tree
//        binaryTree.setRoot(new Node<>(1));
//        binaryTree.getRoot().setLeft(new Node<>(2));
//        binaryTree.getRoot().setRight(new Node<>(3));

        //left
//        binaryTree.getRoot().getLeft().setLeft(new Node<>(4));


        //right
//        binaryTree.getRoot().getRight().setLeft(new Node<>(15));
//        binaryTree.getRoot().getRight().setRight(new Node<>(33));

//        System.out.println(binaryTree.getSumOfOddNumber());
//        binaryTree.getRoot().getRight().getRight().setRight(new Node(10));
//        binaryTree.getRoot().getLeft().getLeft().setLeft(new Node(5));
//        binaryTree.getRoot().getLeft().getLeft().setRight(new Node(10));


//        System.out.println(binaryTree2.breadthFirst(binaryTree));

//        System.out.println("inorder");
//        System.out.println("Before");
//        binaryTree.inOrderTraverse(binaryTree.getRoot());
//        System.out.println();
//        System.out.println("After");
//        BinaryTree<String> newTree =binaryTree.fizzBzzTree(binaryTree);
//        newTree.inOrderTraverse(newTree.getRoot());
//        System.out.println(binaryTree.getMax());
//        System.out.println("");
//        System.out.println("-------------------");
//        System.out.println("");
//        System.out.println("inorder");
//        binaryTree.inOrderTraverse(binaryTree.getRoot());
//        System.out.println("");
//        System.out.println("-------------------");
//        System.out.println();
//        System.out.println("postorder");
//        binaryTree.postOrderTraverse(binaryTree.getRoot());
//        System.out.println("");
//        System.out.println("-------------------");
//        System.out.println();
//        System.out.println("preorder");
//        binaryTree.preOrderTraverse(binaryTree.getRoot());
//        System.out.println("");
//
//        System.out.println("-------------------");
//
//        BinarySearchTree binarySearchTree = new BinarySearchTree();
////        System.out.println(binarySearchTree.isEmpty());
//        binarySearchTree.add(5);
//        binarySearchTree.add(7);
//        binarySearchTree.add(3);
//        binarySearchTree.add(10);
//        binarySearchTree.add(2);
//        binarySearchTree.add(4);
//        binarySearchTree.add(-1);
//        System.out.println(binarySearchTree.breadthFirst(binarySearchTree));
//        System.out.println(binarySearchTree.getRoot());

    }
}
