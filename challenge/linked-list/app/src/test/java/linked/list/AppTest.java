/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import LinkedList.LinkedList;
import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {

    /**
     * Code Challenge: Class 05: Linked List Implementation
     */

    @Test public void CreateAnLinkedList() {
        LinkedList<Object> link = new LinkedList<>();
        assertEquals("Linked list is empty", link.toString());
    }
    @Test public void insert() {
        LinkedList<Object> link = new LinkedList<>();
        link.append(10);
        assertEquals("{10}-> NULL", link.toString());
    }
    @Test public void MultipleInsert() {
        LinkedList<Object> link = new LinkedList<>();
        link.append(10);
        link.append(10);
        link.append(10);
        assertEquals("{10}-> {10}-> {10}-> NULL", link.toString());
    }
    @Test public void testLinkedListIncludesTrue() {
        LinkedList<Object> link = new LinkedList<>();
        link.append(10);
        link.append(11);
        link.append(12);
        assertEquals(true, link.includes(11));
    }

    @Test public void testLinkedListIncludesFalse() {
        LinkedList<Object> link = new LinkedList<>();
        link.append(10);
        link.append(11);
        link.append(12);
        assertEquals(false, link.includes(20));
    }
    @Test public void collectionOfAllValue() {
        LinkedList<Object> link = new LinkedList<>();
        link.append(10);
        link.append(11);
        link.append(12);
        assertEquals("{10}-> {11}-> {12}-> NULL", link.toString());
    }


    /**
     * Code Challenge: Class 06:
     */

    @Test public void insertToTheEndOfList() {
        LinkedList<Object> link = new LinkedList<>();
        link.insertAtEnd(10);

        assertEquals("{10}-> NULL", link.toString());
    }
    @Test public void insertMultipleToTheList() {
        LinkedList<Object> link = new LinkedList<>();
        link.insertAtEnd(10);
        link.insertAtEnd(11);
        link.insertAtEnd(12);
        assertEquals("{10}-> {11}-> {12}-> NULL", link.toString());
    }
    @Test public void insertBeforeTheMiddleOfList() {
        LinkedList<Object> link = new LinkedList<>();
        link.insertAtEnd(10);
        link.insertAtEnd(11);
        link.insertAtEnd(12);
        link.insertAtEnd(13);
        link.insertBefore(11,20);
        assertEquals("{10}-> {20}-> {11}-> {12}-> {13}-> NULL", link.toString());
    }
    @Test public void insertBeforeTheFirstOfList() {
        LinkedList<Object> link = new LinkedList<>();
        link.insertAtEnd(10);
        link.insertAtEnd(11);
        link.insertAtEnd(12);
        link.insertAtEnd(13);
        link.insertBefore(10,20);
        assertEquals("{20}-> {10}-> {11}-> {12}-> {13}-> NULL", link.toString());
    }
    @Test public void insertAfterTheMiddleOfList() {
        LinkedList<Object> link = new LinkedList<>();
        link.insertAtEnd(10);
        link.insertAtEnd(11);
        link.insertAtEnd(12);
        link.insertAtEnd(13);
        link.insertAfter(11,20);
        assertEquals("{10}-> {11}-> {20}-> {12}-> {13}-> NULL", link.toString());
    }
    @Test public void insertAfterTheLastNodeList() {
        LinkedList<Object> link = new LinkedList<>();
        link.insertAtEnd(10);
        link.insertAtEnd(11);
        link.insertAtEnd(12);
        link.insertAtEnd(13);
        link.insertAfter(13,20);
        assertEquals("{10}-> {11}-> {12}-> {13}-> {20}-> NULL", link.toString());
    }

    /**
     * Code Challenge: Class 07
     */

    @Test public void k_AreGraterThanTheLength() {
        LinkedList<Object> link = new LinkedList<>();
        link.insertAtEnd(10);
        link.insertAtEnd(11);
        link.insertAtEnd(12);
        link.insertAtEnd(13);
        assertEquals("Out of Bonds", link.kthFromEnd(10));
    }
    @Test public void k_AreEqualToTheLength() {
        LinkedList<Object> link = new LinkedList<>();
        link.insertAtEnd(10);
        link.insertAtEnd(11);
        link.insertAtEnd(12);
        link.insertAtEnd(13);
        assertEquals(10, link.kthFromEnd(3));
    }
    @Test public void k_AreNotPositiveInteger() {
        LinkedList<Object> link = new LinkedList<>();
        link.insertAtEnd(10);
        link.insertAtEnd(11);
        link.insertAtEnd(12);
        link.insertAtEnd(13);
        assertEquals("Out of Bonds", link.kthFromEnd(-20));
    }
    @Test public void LinkedListOfSizeOne() {
        LinkedList<Object> link = new LinkedList<>();
        link.insertAtEnd(10);
        assertEquals(10, link.kthFromEnd(0));
    }
    @Test public void k_IsInTheMiddle() {
        LinkedList<Object> link = new LinkedList<>();
        link.insertAtEnd(10);
        link.insertAtEnd(11);
        link.insertAtEnd(12);
        link.insertAtEnd(13);
        link.insertAtEnd(14);
        link.insertAtEnd(15);
        assertEquals(12, link.kthFromEnd(3));
    }

    /**
     * Code Challenge: Class 08
     */

    @Test
    public void testLinkedListZipListsNormal() {
        LinkedList<Integer> link = new LinkedList<Integer>();
        LinkedList<Integer> link2 = new LinkedList<Integer>();
        link.append(1);
        link.append(3);
        link.append(2);

        link2.append(5);
        link2.append(6);
        link2.append(7);

        link.zipLists(link,link2);
        assertEquals("{1}-> {5}-> {3}-> {6}-> {2}-> {7}-> NULL",link.toString() );
    }

    @Test
    public void testLinkedListZipListsShorterListOne() {
        LinkedList<Integer> link = new LinkedList<Integer>();
        LinkedList<Integer> link2 = new LinkedList<Integer>();
        link.append(1);
        link.append(3);
        link.append(2);

        link2.append(5);
        link2.append(6);

        link.zipLists(link,link2);
        assertEquals("{1}-> {5}-> {3}-> {6}-> {2}-> NULL", link.toString());
    }

    @Test
    public void testLinkedListZipListsShorterListTwo() {
        LinkedList<Integer> link = new LinkedList<Integer>();
        LinkedList<Integer> link2 = new LinkedList<Integer>();
        link.append(1);
        link.append(3);

        link2.append(5);
        link2.append(6);
        link2.append(2);

        link.zipLists(link,link2);
        assertEquals("{1}-> {5}-> {3}-> {6}-> {2}-> NULL", link.toString());
    }
    @Test
    public void testLinkedListZipListsOneAreEmpty() {
        LinkedList<Integer> link = new LinkedList<Integer>();
        LinkedList<Integer> link2 = new LinkedList<Integer>();
        link.append(1);
        link.append(3);


        link.zipLists(link,link2);
        assertEquals("{1}-> {3}-> NULL", link.toString());
    }

}
